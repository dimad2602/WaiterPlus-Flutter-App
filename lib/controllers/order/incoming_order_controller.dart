import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../../firebase_ref/loading_status.dart';
import '../../firebase_ref/references.dart';
import '../../models/order_model.dart';

class IncomingOrderController extends GetxController {
  final loadingStatus = LoadingStatus.loading.obs;
  final allPapers = <Autogenerated>[].obs;

  final allCategories = <OrderItems>[].obs;

  @override
  void onReady() {
    getAllPapers();
    super.onReady();
  }

  void setloadingStatusIsLoading() {
    loadingStatus.value = LoadingStatus.loading;
  }

  Future<void> getAllPapers() async {
    loadingStatus.value = LoadingStatus.loading;
    try {
      QuerySnapshot<Map<String, dynamic>> data = await orderRF.get();
      final paperList = data.docs
          .map((ordersRest1) => Autogenerated.fromSnapshot(ordersRest1))
          .toList();
      print("Мы тут");
      print(paperList.toString());
      allPapers.assignAll(paperList);

      for (var paper in paperList) {
        await getAllCategories(paper);
      }
      allPapers.assignAll(paperList);

      /*for (var paper in paperList) {
        //final imgUrl = await Get.find<FirebaseStorageService>().getImage(paper.name.toLowerCase());
        final imgUrl = await Get.find<FirebaseStorageService>().getImage(paper.name.toLowerCase().replaceAll(' ', ''));
        paper.img = imgUrl;
      }
      allPapers.assignAll(paperList);*/
    } catch (e) {
      print("IncomingOrderController error");
      print(e);
    }
    loadingStatus.value = LoadingStatus.completed;
  }

  Future<void> getAllCategories(Autogenerated order) async {
    loadingStatus.value = LoadingStatus.loading;
    //allCategories.clear();
    try {
      //allItemsForCategory.clear();
      final QuerySnapshot<Map<String, dynamic>> data =
      await orderRF.doc(order.id).collection("orderItems").get();
      final paperList = data.docs
          .map((snapshot) => OrderItems.fromSnapshot(snapshot))
          .toList();
      allCategories.assignAll(paperList);
      order.orderItems = paperList;

      /*for (OrderItems _orderItems in order.orderItems!) {
        final QuerySnapshot<Map<String, dynamic>> itemsQuery =
        await orderRF
            .doc(order.id)
            .collection("orderItems")
            .get();
            //.doc(_orderItems.id)
            //.collection("items")
            //.get();

       *//* final items = itemsQuery.docs.map((item) => Items.fromSnapshot(item))
            .toList();
        _orderItems.items = items;
        List<Items> myItems = [];
        myItems.addAll(items);
        //print('List   ${myItems.length}');
        allItemsForCategory.add(myItems);*//*

        //print('List   ${allItemsForCategory}');
        *//*List<Items> myItems = [];
        myItems.clear();
        myItems.add(items as Items);
        allItemsForCategory.add(myItems as Items);
        print('List   ${allItemsForCategory}');*//*
        // allItemsForCategory.add(items);
        // print('List   ${allItemsForCategory}');
      }*/
      /*for (var paper in paperList) {
        final imgUrl = await Get.find<FirebaseStorageService>().getImage(paper.name.toLowerCase().replaceAll(' ', ''));
        paper.img = imgUrl;
      }
      allCategories.assignAll(paperList);*/
      //print("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL ${allCategories.length}");
    } catch (e) {
      print("my error  getAllCategories");
      print(e);
    }

    /*for (List<Items> subList in allItemsForCategory) {
      for (Items item in subList) {
        print(item.itemName);
      }
    }*/
    loadingStatus.value = LoadingStatus.completed;
    update();
  }

  /*void navigateToOrder({required Autogenerated paper, bool tryAgain=false, bool needClear=true}) {
      // Код для попадания на страницу меню
      final controller = Get.put(MenuPaperController());
      controller.loadData(paper);
      controller.getAllCategories(paper);

      //TODO: Сейчас надпись о том сколько товаров в карзине не отображаеться при первом запуске, это происходит из за отсутсвия объекта карзина
      //TODO: очишаем карзину если заходим в ресторан // потом нужно сделать, только при захоже на другой ресторан
      //Get.find<CartController>().items.clear();
      CartRepo cartRepo = Get.find<CartRepo>();
      needClear == true? cartRepo.clearCartListIfDifferentRestaurant(paper.id): print("Очиска отменена");
      //cartRepo.rememberRestorauntForCart(paper);
      //Get.find<CartRepo>().removeHistory();
      Get.toNamed(MenuFirePage.routeName, arguments: paper);
  }*/
}
